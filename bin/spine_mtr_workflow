#! /usr/bin/env python
import argparse
import os

from sct_pipeline.workflows.processing import create_spinalcord_mtr_workflow

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-mton', '--mton-file', type=str)
    parser.add_argument('-mtoff', '--mtoff-file', type=str)
    parser.add_argument('-d', '--scan-directory', type=str, default=os.getcwd())
    parser.add_argument('-p', '--patient-id', type=str)
    parser.add_argument('-s', '--scan-id', type=str)
    parser.add_argument('--compute-csa', action='store_true', default=False)
    parser.add_argument('--compute-avg-mtr', action='store_true', default=False)
    parser.add_argument('--use-iacl-struct', action='store_true', default=False)
    # If True, write the intermediate files to scan_directory/patient_id/pipeline/SCT_MTR_scan_id folder
    # and output files are copied to scan_directory/patient_id/scan_id/
    # If False and ids provided, write intermediate files to scan_directory/patient_id_scan_id/SCT_MTR
    # If patient_id and scan_id are None, write to scan_directory/SCT_MTR
    parser.add_argument('-t', '--num_threads', type=int, default=1)
    args = parser.parse_args()

    if args.use_iacl_struct and args.patient_id is None and args.scan_id is None:
        raise ValueError('Need to provide a patient_id and scan_id to use the IACL folder structure')

    if args.use_iacl_struct:
        args.mton_file = os.path.join(args.scan_directory, args.patient_id, args.scan_id, 'raw',
                                      args.patient_id + '_' + args.scan_id + '_SPINE_MT.nii.gz')
        args.mton_file = os.path.abspath(os.path.expanduser(args.mton_file))
        args.mtoff_file = os.path.join(args.scan_directory, args.patient_id, args.scan_id, 'raw',
                                       args.patient_id + '_' + args.scan_id + '_SPINE_MT_OFF.nii.gz')
        args.mtoff_file = os.path.abspath(os.path.expanduser(args.mtoff_file))
        #TODO: Check file exists?
    else:
        for a in ['mton_file','mtoff_file']:
            if getattr(args, a) is not None:
                setattr(args, a, os.path.abspath(os.path.expanduser(getattr(args, a))))

    wf = create_spinalcord_mtr_workflow(args.scan_directory, args.patient_id, args.scan_id,
                                        compute_csa=args.compute_csa, compute_avggmwm=args.compute_avg_mtr,
                                        use_iacl_struct=args.use_iacl_struct)

    for a in ['mton_file','mtoff_file']:
        if getattr(args, a) is not None:
            setattr(wf.inputs.input_node, a, getattr(args, a))

    if args.num_threads == 1:
        wf.run()
    else:
        wf.run(plugin='MultiProc', plugin_args={'n_procs': args.num_threads})


