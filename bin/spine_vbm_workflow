#! /usr/bin/env python
import argparse
import os

from sct_pipeline.workflows.spine_vbm import create_spine_template_workflow

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--spine-files', nargs='+', type=str, required=True)
    parser.add_argument('--design-mat', type=str, required=True)
    parser.add_argument('--tcon', type=str, required=True)
    parser.add_argument('-o', '--output-root', type=str, default=os.getcwd())
    parser.add_argument('-t', '--num_threads', type=int, default=1)
    args = parser.parse_args()

    if args.spine_files is not None:
        args.spine_files = [os.path.abspath(os.path.expanduser(image)) for image in args.spine_files]
    #if args.seg_files is not None:
    #    args.seg_files = [os.path.abspath(os.path.expanduser(image)) for image in args.seg_files]

    for a in ['design_mat', 'tcon']:
        if getattr(args, a) is not None:
            setattr(args, a, os.path.abspath(os.path.expanduser(getattr(args, a))))

    wf = create_spine_template_workflow(args.output_root)

    if args.spine_files is not None:
        wf.inputs.input_node.spine_files = args.spine_files

    for a in ['design_mat', 'tcon']:
        if getattr(args, a) is not None:
            setattr(wf.inputs.input_node, a, getattr(args, a))

    if args.num_threads == 1:
        wf.run()
    else:
        wf.run(plugin='MultiProc', plugin_args={'n_procs': args.num_threads})


